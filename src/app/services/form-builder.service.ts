import { Injectable, signal } from '@angular/core';
import { DroppedComponent, FormComponentDefinition } from '../core/models/component.model';
import { StateManagementService } from '../form-constructor/services/state-management.service';
import { DragDropService } from '../form-constructor/services/drag-drop.service';
import { EventBusService } from '../form-constructor/services/event-bus.service';
import { HtmlGenerationService } from '../form-constructor/services/html-generation.service';
import { COMPONENT_TYPES, DEFAULT_PROPERTIES } from '../form-constructor/constants/editor.constants';

@Injectable({
  providedIn: 'root'
})
export class FormBuilderService {
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  public availableComponents: FormComponentDefinition[] = [
    {
      type: COMPONENT_TYPES.TEXT_INPUT,
      label: '–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ',
      icon: 'üìù',
      defaultProperties: { label: '–¢–µ–∫—Å—Ç', placeholder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç' }
    },
    {
      type: COMPONENT_TYPES.TEXTAREA,
      label: '–¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å',
      icon: 'üìÑ',
      defaultProperties: { label: '–¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å', rows: 4 }
    },
    {
      type: COMPONENT_TYPES.SELECT,
      label: '–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫',
      icon: 'üîΩ',
      defaultProperties: { label: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç', options: ['–í–∞—Ä–∏–∞–Ω—Ç 1', '–í–∞—Ä–∏–∞–Ω—Ç 2'] }
    },
    {
      type: COMPONENT_TYPES.CHECKBOX,
      label: '–ß–µ–∫–±–æ–∫—Å',
      icon: '‚òëÔ∏è',
      defaultProperties: { label: '–ß–µ–∫–±–æ–∫—Å', checked: false }
    },
    {
      type: COMPONENT_TYPES.BUTTON,
      label: '–ö–Ω–æ–ø–∫–∞',
      icon: 'üîò',
      defaultProperties: { label: '–ö–Ω–æ–ø–∫–∞', type: 'button' }
    }
  ];

  constructor(
    private stateManagementService: StateManagementService,
    private dragDropService: DragDropService,
    private eventBusService: EventBusService,
    private htmlGenerationService: HtmlGenerationService
  ) {}

  // –ì–µ—Ç—Ç–µ—Ä—ã
  getDroppedComponents() {
    return this.stateManagementService.components;
  }

  // –î–µ–ª–µ–≥–∞—Ç—ã –¥–ª—è StateManagementService
  get selectedComponentId() {
    return this.stateManagementService.selectedComponentId;
  }

  // –î–µ–ª–µ–≥–∞—Ç—ã –¥–ª—è DragDropService
  get isDragging() {
    return this.dragDropService.isDragging;
  }

  get dragSource() {
    return this.dragDropService.dragSource;
  }

  get currentDragComponent() {
    return this.dragDropService.currentDragComponent;
  }

  get dragGhost() {
    return this.dragDropService.dragGhost;
  }

  get isCanvasHovered() {
    return this.dragDropService.isCanvasHovered;
  }

  get canvasDropZone() {
    return this.dragDropService.canvasDropZone;
  }

  get dropZones() {
    return this.dragDropService.dropZones;
  }

  get hoverStates() {
    return this.dragDropService.hoverStates;
  }

  // Setter –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  setDragSource(value: 'sidebar' | 'canvas') {
    this.dragDropService.dragSource = value;
  }

  setCurrentDragComponent(value: any) {
    this.dragDropService.currentDragComponent = value;
  }

  setDragGhost(value: HTMLElement | null) {
    this.dragDropService.dragGhost = value;
  }

  setSelectedComponentId(value: string | null) {
    this.stateManagementService.selectComponent(value);
  }

  setIsDragging(value: boolean) {
    this.stateManagementService.setDragging(value);
  }

  setIsCanvasHovered(value: boolean) {
    this.stateManagementService.setCanvasHovered(value);
  }

  setCanvasDropZone(value: 'top' | 'bottom' | null) {
    this.dragDropService.canvasDropZone.set(value);
  }

  clearComponents() {
    this.stateManagementService.clearComponents();
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
  addComponent(component: DroppedComponent, parentId?: string | null) {
    this.stateManagementService.addComponent(component, parentId);
  }

  removeComponent(componentId: string) {
    this.stateManagementService.removeComponent(componentId);
  }

  updateComponent(componentId: string, properties: any) {
    this.stateManagementService.updateComponent(componentId, properties);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML
  generateFormHtml() {
    return this.htmlGenerationService.generateFormHtml(this.stateManagementService.components());
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  public insertComponent(components: DroppedComponent[], newComponent: DroppedComponent, parentId: string): DroppedComponent[] {
    return components.map(component => {
      if (component.id === parentId) {
        return {
          ...component,
          children: [...(component.children || []), newComponent]
        };
      }
      if (component.children) {
        return {
          ...component,
          children: this.insertComponent(component.children, newComponent, parentId)
        };
      }
      return component;
    });
  }

  public filterComponents(components: DroppedComponent[], componentId: string): DroppedComponent[] {
    return components.filter(component => {
      if (component.id === componentId) return false;
      if (component.children) {
        component.children = this.filterComponents(component.children, componentId);
      }
      return true;
    });
  }

  public updateComponentProperties(components: DroppedComponent[], componentId: string, properties: any): DroppedComponent[] {
    return components.map(component => {
      if (component.id === componentId) {
        return { ...component, properties: { ...component.properties, ...properties } };
      }
      if (component.children) {
        return {
          ...component,
          children: this.updateComponentProperties(component.children, componentId, properties)
        };
      }
      return component;
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è Drop Zones
  setDropZone(componentId: string, position: 'top' | 'bottom' | 'left' | 'right' | null) {
    this.dragDropService.setDropZone(componentId, position);
  }

  setHoverState(componentId: string, isHovered: boolean) {
    this.dragDropService.setHoverState(componentId, isHovered);
  }

  getDropZone(componentId: string): 'top' | 'bottom' | 'left' | 'right' | null {
    return this.dragDropService.getDropZone(componentId);
  }

  getHoverState(componentId: string): boolean {
    return this.dragDropService.getHoverState(componentId);
  }

  clearDropZones() {
    this.dragDropService.clearDropZones();
  }

  // –í—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, drag & drop, drop zones ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∑–¥–µ—Å—å.
}